name: "Fullcheck of the project + integration tests"

on:
  workflow_call:
    secrets:
      API_KEY_OPEN_CAGE_DATA_GEOCODING:
        required: true
      API_KEY_OPEN_CAGE_DATA_GEOSEARCH:
        required: true
      IC_ADMIN_PASSWORD:
        required: true
      IC_PASSWORD:
        required: true
      IC_USERNAME:
        required: true
      PC_ADMIN_PASSWORD:
        required: true
      PC_PASSWORD:
        required: true
      PC_USERNAME:
        required: true
      SIRENE_INSEE_CLIENT_ID:
        required: true
      SIRENE_INSEE_CLIENT_SECRET:
        required: true
      SIRENE_INSEE_USERNAME:
        required: true
      SIRENE_INSEE_PASSWORD:
        required: true
      INCLUSION_CONNECT_CLIENT_SECRET:
        required: true
      PRO_CONNECT_CLIENT_SECRET:
        required: true

jobs:
  validation:
    name: "Validations"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        command: ["pnpm fast-checks", "pnpm typecheck", "pnpm back test"]

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.9.0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0"
          cache: "pnpm"

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node_modules_cache_id
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-node-modules-

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: ${{matrix.command}}
        run: ${{matrix.command}}

  back-integration-tests:
    name: "Back integration tests"
    runs-on: ubuntu-latest
    env:
      TEST_DATABASE_URL: postgresql://immersion:password@localhost:5432/immersion-db
      TEST_REDIS_URL: redis://@localhost:6379
      DBT_HOST: localhost
      DBT_USER: immersion
      DBT_PASSWORD: password
      DBT_PORT: 5432
      DBT_DATABASE: immersion-db
    services:
      redis:
        image: redis:7.2.5
        ports:
          - 6379:6379
      postgres:
        image: postgis/postgis:13-master
        env:
          POSTGRES_USER: immersion
          POSTGRES_PASSWORD: password
          POSTGRES_DB: immersion-db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.9.0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0"
          cache: "pnpm"

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node_modules_cache_id
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-node-modules-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline --filter=!playwright
      - name: Install bun
        run: npm install -g bun@1.2.10  # do NOT use pnpm here, for bun, it will FAIL
      - name: Run migrations
        run: NODE_ENV=test DATABASE_URL=$TEST_DATABASE_URL pnpm back db:up:bun
      - name: Run integration tests
        run: |
          echo $TEST_DATABASE_URL
          echo $TEST_REDIS_URL
          DATABASE_URL=$TEST_DATABASE_URL REDIS_URL=$TEST_REDIS_URL pnpm back test:integration
      - name: Install DBT dependencies
        run: pnpm bi:setup
      - name: Run DBT fullcheck
        run: pnpm bi:fullcheck

  playwright-tests:
    name: "Playwright tests"
    if: github.ref != 'refs/heads/main' # Skip this job on main branch
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://immersion:password@localhost:5432/immersion-db
      NOTIFICATION_GATEWAY: IN_MEMORY
      ESTABLISHMENT_MARKETING_GATEWAY: IN_MEMORY
      ADDRESS_API_GATEWAY: OPEN_CAGE_DATA
      IC_USERNAME: ${{ secrets.IC_USERNAME }}
      IC_PASSWORD: ${{ secrets.IC_PASSWORD }}
      IC_ADMIN_PASSWORD: ${{ secrets.IC_ADMIN_PASSWORD }}
      PC_USERNAME: ${{ secrets.PC_USERNAME }}
      PC_PASSWORD: ${{ secrets.PC_PASSWORD }}
      PC_ADMIN_PASSWORD: ${{ secrets.PC_ADMIN_PASSWORD }}
      INCLUSION_CONNECT_GATEWAY: "HTTPS"
      INCLUSION_CONNECT_CLIENT_ID: local_inclusion_connect
      INCLUSION_CONNECT_CLIENT_SECRET: ${{ secrets.INCLUSION_CONNECT_CLIENT_SECRET }}
      INCLUSION_CONNECT_BASE_URI: "https://recette.connect.inclusion.beta.gouv.fr/auth"
      PRO_CONNECT_GATEWAY: "HTTPS"
      PRO_CONNECT_CLIENT_ID: 449e24c6-b5aa-4435-bb8c-728d4a3c1c94
      PRO_CONNECT_CLIENT_SECRET: ${{ secrets.PRO_CONNECT_CLIENT_SECRET }}
      PRO_CONNECT_BASE_URI: "https://fca.integ01.dev-agentconnect.fr/api/v2"
      API_KEY_OPEN_CAGE_DATA_GEOCODING: ${{ secrets.API_KEY_OPEN_CAGE_DATA_GEOCODING }}
      API_KEY_OPEN_CAGE_DATA_GEOSEARCH: ${{ secrets.API_KEY_OPEN_CAGE_DATA_GEOSEARCH }}
      POLE_EMPLOI_GATEWAY: IN_MEMORY
      LA_BONNE_BOITE_GATEWAY: IN_MEMORY
      PASS_EMPLOI_GATEWAY: IN_MEMORY
      PDF_GENERATOR_GATEWAY: IN_MEMORY
      SHORT_LINK_ID_GENERATOR_GATEWAY: NANO_ID
      # The following keys are for local use only, they are considered compromised and shall never be use on any of our environements
      JWT_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgevZzL1gdAFr88hb2\nOF/2NxApJCzGCEDdfSp6VQO30hyhRANCAAQRWz+jn65BtOMvdyHKcvjBeBSDZH2r\n1RTwjmYSi9R/zpBnuQ4EiMnCqfMPWiZqB4QdbAd0E7oH50VpuZ1P087G\n-----END PRIVATE KEY-----"
      JWT_PUBLIC_KEY: "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9\nq9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==\n-----END PUBLIC KEY-----\n"
      API_JWT_PRIVATE_KEY: "-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIPnK7kOKC6VqJwmsXCcCgNfVEAMyt0IFm68g/dwg3/iVoAoGCCqGSM49\nAwEHoUQDQgAEXNo97BD4w2huuAYsmINnn/+TPolxYUexkcD49YyxsjJPA2d91B2r\nDzteUKnEsloNYDTeYW88oLPMdgmbzm+sQg==\n-----END EC PRIVATE KEY-----"
      API_JWT_PUBLIC_KEY: "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEXNo97BD4w2huuAYsmINnn/+TPolx\nYUexkcD49YyxsjJPA2d91B2rDzteUKnEsloNYDTeYW88oLPMdgmbzm+sQg==\n-----END PUBLIC KEY-----"
      DOMAIN: localhost:3000
      BACKOFFICE_USERNAME: admin
      BACKOFFICE_PASSWORD: password
      REPOSITORIES: PG
      INBOUND_EMAIL_ALLOWED_IPS: ::ffff:127.0.0.1
      SIRENE_REPOSITORY: ANNUAIRE_DES_ENTREPRISES
      SIRENE_INSEE_ENDPOINT: https://api.insee.fr/api-sirene/prive/3.11
      SIRENE_INSEE_CLIENT_ID: ${{ secrets.SIRENE_INSEE_CLIENT_ID }}
      SIRENE_INSEE_CLIENT_SECRET: ${{ secrets.SIRENE_INSEE_CLIENT_SECRET }}
      SIRENE_INSEE_USERNAME: ${{ secrets.SIRENE_INSEE_USERNAME }}
      SIRENE_INSEE_PASSWORD: ${{ secrets.SIRENE_INSEE_PASSWORD }}
      EVENT_CRAWLER_PERIOD_MS: 600
      EXTERNAL_AXIOS_TIMEOUT: 30000
    services:
      postgres:
        image: postgis/postgis:13-master
        env:
          POSTGRES_USER: immersion
          POSTGRES_PASSWORD: password
          POSTGRES_DB: immersion-db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 10.9.0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.14.0"
          cache: "pnpm"

      - name: Cache node_modules
        uses: actions/cache@v4
        id: node_modules_cache_id
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-node-modules-

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-playwright-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline
      - name: Install bun
        run: npm install -g bun@1.2.10 # do NOT use pnpm here, for bun, it will FAIL
      - name: Run migrations
        run: pnpm back db:up:bun
      - name: Run seed
        run: pnpm back db:seed:bun
      - name: Start the backend
        run: pnpm back dev:no-typecheck &
      - name: Start the frontend
        run: pnpm front dev &
      - name: Wait for the backend to be ready
        run: npx --yes wait-on tcp:localhost:1234 -t 10000
      - name: Ping backend
        run: curl -X GET http://localhost:3000/api
      - name: Run playwright tests
        run: |
          pnpm playwright test:ci
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: ./playwright/playwright-report/
          retention-days: 30
