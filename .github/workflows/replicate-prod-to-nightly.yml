name: Copy prod (secnum) DB to nightly (secnum-nightly) DB

on:
  workflow_dispatch:
  schedule:
    - cron: "03 23 * * *"

jobs:
  duplicate-prod-db-to-nightly:
    runs-on: ubuntu-latest
    name: Dump and restore the remote database data.

    steps:
      - uses: actions/checkout@v4
      - name: Install scalingo CLI
        uses: ./.github/actions/install-scalingo-cli

      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN_SECNUM }}

      - name: Dump the remote database data and restore it to the local database.
        run: >-
          scalingo --region osc-secnum-fr1 --app if-prod-nightly-db run --size XL bash -c "
                echo \"> \$(date) - activate Scalingo CLI, PG then login\" &&
                  install-scalingo-cli &&
                  dbclient-fetcher pgsql &&
                  scalingo login --api-token ${{ secrets.SCALINGO_API_TOKEN_SECNUM }} &&
                echo \"> \$(date) - Getting Bearer token\" &&
                  BEARER_TOKEN=\$(curl -s -H \"Accept: application/json\" \
                    -H \"Content-Type: application/json\" \
                    -u \":tk-us-tUOhjfkfATKQBEZxrYtPRnpKXdSx6octhT1Okrf0UUkNT5e2\" \
                    -X POST https://auth.scalingo.com/v1/tokens/exchange\
                     | jq -r '.token') &&
                echo \"> \$(date) - Getting PG Addon ID\" &&
                  ADDON_ID=\$(curl -H \"Accept: application/json\"\
                    -H \"Content-Type: application/json\"\
                    -H \"Authorization: Bearer \$BEARER_TOKEN\"\
                    -X GET https://api.osc-secnum-fr1.scalingo.com/v1/apps/if-prod-back/addons\
                    | jq -r '.addons[] | select(.addon_provider.id==\"postgresql\") | .id') &&
                echo \"> PG Addon ID is : \$ADDON_ID\" &&
                echo \"> \$(date) - Downloading last DB backup\" &&
                  scalingo --region osc-secnum-fr1 --app if-prod-back --addon=\$ADDON_ID backups-download --output=dump.tar.gz &&
                  tar --to-stdout -xzf dump.tar.gz > dump.pgsql &&
                echo \"> \$(date) - Create a Table of content for restore, ignore postgis related schemas and tables:\" &&
                  pg_restore -l dump.pgsql | grep -v tiger | grep -v spatial_ref_sys | grep -v topology > list.txt &&
                echo \"> \$(date) - Dropping data and schema owned by current user\" &&
                  psql \$SCALINGO_POSTGRESQL_URL -c 'DROP OWNED BY CURRENT_USER CASCADE;' &&
                echo \"> \$(date) - Add Postgis extension if not exists\" &&
                  psql \$SCALINGO_POSTGRESQL_URL -c 'CREATE EXTENSION IF NOT EXISTS postgis;' &&
                echo \"> \$(date) - Start pg_restore\" &&\
                  pg_restore\
                    --jobs=8\
                    --disable-triggers\
                    --use-list=list.txt\
                    --verbose\
                    --no-owner\
                    --no-privileges\
                    --no-comments\
                    --exit-on-error\
                    --dbname \$SCALINGO_POSTGRESQL_URL dump.pgsql &&
                echo \"> \$(date) - Finished restoring schema\" &&
                  exit 0"


